/*
 *	autogen/server/zone/objects/tangible/misc/FsCsObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "FsCsObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"

/*
 *	FsCsObjectStub
 */

enum {RPC_GETDECAYPERCENT__,RPC_GETPHASEDURATION__,RPC_SETPHASEDURATION__INT_};

FsCsObject::FsCsObject() : TangibleObject(DummyConstructorParameter::instance()) {
	FsCsObjectImplementation* _implementation = new FsCsObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FsCsObject");
}

FsCsObject::FsCsObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("FsCsObject");
}

FsCsObject::~FsCsObject() {
}



void FsCsObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	FsCsObjectImplementation* _implementation = static_cast<FsCsObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

int FsCsObject::getDecayPercent() {
	FsCsObjectImplementation* _implementation = static_cast<FsCsObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDECAYPERCENT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDecayPercent();
	}
}

int FsCsObject::getPhaseDuration() {
	FsCsObjectImplementation* _implementation = static_cast<FsCsObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPHASEDURATION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPhaseDuration();
	}
}

void FsCsObject::setPhaseDuration(int dur) {
	FsCsObjectImplementation* _implementation = static_cast<FsCsObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPHASEDURATION__INT_);
		method.addSignedIntParameter(dur);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPhaseDuration(dur);
	}
}

DistributedObjectServant* FsCsObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FsCsObject::_getImplementationForRead() const {
	return _impl;
}

void FsCsObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FsCsObjectImplementation
 */

FsCsObjectImplementation::FsCsObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


FsCsObjectImplementation::~FsCsObjectImplementation() {
}


void FsCsObjectImplementation::finalize() {
}

void FsCsObjectImplementation::_initializeImplementation() {
	_setClassHelper(FsCsObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FsCsObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FsCsObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FsCsObjectImplementation::_getStub() {
	return _this.get();
}

FsCsObjectImplementation::operator const FsCsObject*() {
	return _this.get();
}

void FsCsObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FsCsObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FsCsObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FsCsObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FsCsObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FsCsObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FsCsObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FsCsObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("FsCsObject");

}

void FsCsObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FsCsObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FsCsObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x44ece6db: //FsCsObject.createdTime
		TypeInfo<Time >::parseFromBinaryStream(&createdTime, stream);
		return true;

	case 0x4b02d4b3: //FsCsObject.phaseDuration
		TypeInfo<int >::parseFromBinaryStream(&phaseDuration, stream);
		return true;

	}

	return false;
}

void FsCsObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FsCsObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FsCsObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x44ece6db; //FsCsObject.createdTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&createdTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4b02d4b3; //FsCsObject.phaseDuration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&phaseDuration, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

FsCsObjectImplementation::FsCsObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		setLoggingName("FsCsObject");
	setLoggingName("FsCsObject");
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		createdTime.updateToCurrentTime();
	(&createdTime)->updateToCurrentTime();
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		phaseDuration = 1814400000;
	phaseDuration = 1814400000;
}

void FsCsObjectImplementation::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int decay = getDecayPercent();
	int decay = getDecayPercent();
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		string decayStr = String.valueOf(decay) + "%";
	String decayStr = String::valueOf(decay) + "%";
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		msg.insertAttribute("fs_p3_item_decay_rate", decayStr);
	msg->insertAttribute("fs_p3_item_decay_rate", decayStr);
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int itemAge = System.getMiliTime() - createdTime.getMiliTime();
	int itemAge = System::getMiliTime() - (&createdTime)->getMiliTime();
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int timeLeft = phaseDuration - itemAge;
	int timeLeft = phaseDuration - itemAge;
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int days = (timeLeft / 1000 / 60 / 60 / 24);
	int days = (timeLeft / 1000 / 60 / 60 / 24);
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int hours = ((timeLeft / 1000 / 60 / 60) % 24);
	int hours = ((timeLeft / 1000 / 60 / 60) % 24);
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int minutes = ((timeLeft / 1000 / 60) % 60);
	int minutes = ((timeLeft / 1000 / 60) % 60);
	String timeLeftStr;
	// server/zone/objects/tangible/misc/FsCsObject.idl():  			timeLeftStr = String.valueOf(days) + " days, " + String.valueOf(hours) + " hours, " + String.valueOf(minutes) + " minutes";
	if (timeLeft <= 0)	// server/zone/objects/tangible/misc/FsCsObject.idl():  			timeLeftStr = "Already Decayed";
	timeLeftStr = "Already Decayed";

	else 	// server/zone/objects/tangible/misc/FsCsObject.idl():  			timeLeftStr = String.valueOf(days) + " days, " + String.valueOf(hours) + " hours, " + String.valueOf(minutes) + " minutes";
	timeLeftStr = String::valueOf(days) + " days, " + String::valueOf(hours) + " hours, " + String::valueOf(minutes) + " minutes";
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		msg.insertAttribute("fs_p3_item_decay_in", timeLeftStr);
	msg->insertAttribute("fs_p3_item_decay_in", timeLeftStr);
}

int FsCsObjectImplementation::getDecayPercent() {
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int itemAge = System.getMiliTime() - createdTime.getMiliTime();
	int itemAge = System::getMiliTime() - (&createdTime)->getMiliTime();
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		int decay = (int)(((float)itemAge / (float)phaseDuration) * 100);
	int decay = (int) (((float) itemAge / (float) phaseDuration) * 100);
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		return 
	if (decay > 100)	// server/zone/objects/tangible/misc/FsCsObject.idl():  			decay = 100;
	decay = 100;
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		return decay;
	return decay;
}

int FsCsObjectImplementation::getPhaseDuration() {
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		return phaseDuration;
	return phaseDuration;
}

void FsCsObjectImplementation::setPhaseDuration(int dur) {
	// server/zone/objects/tangible/misc/FsCsObject.idl():  		phaseDuration = dur;
	phaseDuration = dur;
}

/*
 *	FsCsObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FsCsObjectAdapter::FsCsObjectAdapter(FsCsObject* obj) : TangibleObjectAdapter(obj) {
}

void FsCsObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETDECAYPERCENT__:
		{
			
			int _m_res = getDecayPercent();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPHASEDURATION__:
		{
			
			int _m_res = getPhaseDuration();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETPHASEDURATION__INT_:
		{
			int dur = inv->getSignedIntParameter();
			
			setPhaseDuration(dur);
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

int FsCsObjectAdapter::getDecayPercent() {
	return (static_cast<FsCsObject*>(stub))->getDecayPercent();
}

int FsCsObjectAdapter::getPhaseDuration() {
	return (static_cast<FsCsObject*>(stub))->getPhaseDuration();
}

void FsCsObjectAdapter::setPhaseDuration(int dur) {
	(static_cast<FsCsObject*>(stub))->setPhaseDuration(dur);
}

/*
 *	FsCsObjectHelper
 */

FsCsObjectHelper* FsCsObjectHelper::staticInitializer = FsCsObjectHelper::instance();

FsCsObjectHelper::FsCsObjectHelper() {
	className = "FsCsObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void FsCsObjectHelper::finalizeHelper() {
	FsCsObjectHelper::finalize();
}

DistributedObject* FsCsObjectHelper::instantiateObject() {
	return new FsCsObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* FsCsObjectHelper::instantiateServant() {
	return new FsCsObjectImplementation();
}

DistributedObjectAdapter* FsCsObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FsCsObjectAdapter(static_cast<FsCsObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaFsCsObject::className[] = "LuaFsCsObject";

Luna<LuaFsCsObject>::RegType LuaFsCsObject::Register[] = {
	{ "_setObject", &LuaFsCsObject::_setObject },
	{ "_getObject", &LuaFsCsObject::_getObject },
	{ "fillAttributeList", &LuaFsCsObject::fillAttributeList },
	{ "getDecayPercent", &LuaFsCsObject::getDecayPercent },
	{ "getPhaseDuration", &LuaFsCsObject::getPhaseDuration },
	{ "setPhaseDuration", &LuaFsCsObject::setPhaseDuration },
	{ 0, 0 }
};

LuaFsCsObject::LuaFsCsObject(lua_State *L) {
	realObject = static_cast<FsCsObject*>(lua_touserdata(L, 1));
}

LuaFsCsObject::~LuaFsCsObject() {
}

int LuaFsCsObject::_setObject(lua_State* L) {
	realObject = static_cast<FsCsObject*>(lua_touserdata(L, -1));

	return 0;
}

int LuaFsCsObject::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaFsCsObject::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCsObject:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'FsCsObject:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'FsCsObject:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaFsCsObject::getDecayPercent(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getDecayPercent();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCsObject:getDecayPercent()'");
	}
	return 0;
}

int LuaFsCsObject::getPhaseDuration(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getPhaseDuration();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCsObject:getPhaseDuration()'");
	}
	return 0;
}

int LuaFsCsObject::setPhaseDuration(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int dur = lua_tointeger(L, -1);

			realObject->setPhaseDuration(dur);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCsObject:setPhaseDuration(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'FsCsObject:setPhaseDuration(integer)'");
	}
	return 0;
}

